startedOn: 2023-02-20T16:23:01.3725162+01:00
finishedOn: 2023-02-20T16:23:02.6185811+01:00
duration: 00:00:01.2460649
results:
- executionGuid: 274e6d97-7cc5-41f9-ab74-cc6f255d555a
  testResult: Passed
  message: >+
    Both sets have the same number of rows and their values match.


    Description: Count of rows

    First Data Source: AW

    First Query:

        SELECT COUNT(*) 
    FROM [Sales].[SalesOrderHeader] H

    JOIN Sales.SalesOrderDetail D

    ON D.SalesOrderID = H.SalesOrderID

    WHERE OnlineOrderFlag = 1



    Second Data Source: AWDW

    Second Query:

        SELECT COUNT(*) FROM [dbo].[FactInternetSales]


  startTime: 2023-02-20T16:23:01.3725752+01:00
  endTime: 2023-02-20T16:23:01.5200011+01:00
  duration: 00:00:00.1474259
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: 0aebe47c-6410-4de9-b695-c74591b7fac0
    suite: Integration test
    order: 1
    testCase: Sales.SalesOrderHeader x dbo.FactInternetSales
    name: Sales.SalesOrderHeader x dbo.FactInternetSales
    testFullName: '[Integration test].[1].[Sales.SalesOrderHeader x dbo.FactInternetSales].[Sales.SalesOrderHeader x dbo.FactInternetSales]'
    descripiton: Count of rows
    firstDataSource: AW
    firstQuery: >
      SELECT COUNT(*) 

      FROM [Sales].[SalesOrderHeader] H

      JOIN Sales.SalesOrderDetail D

      ON D.SalesOrderID = H.SalesOrderID

      WHERE OnlineOrderFlag = 1
    secondDataSource: AWDW
    secondQuery: >
      SELECT COUNT(*) FROM [dbo].[FactInternetSales]
    expectation: SetsMatch
    timeout: 0
    settings:
      TestSuite: Integration test
      Order: 1
      TestCase: Sales.SalesOrderHeader x dbo.FactInternetSales
      Name: Sales.SalesOrderHeader x dbo.FactInternetSales
      Description: Count of rows
      First Data Source: AW
      First Query: >
        SELECT COUNT(*) 

        FROM [Sales].[SalesOrderHeader] H

        JOIN Sales.SalesOrderDetail D

        ON D.SalesOrderID = H.SalesOrderID

        WHERE OnlineOrderFlag = 1
      Second Data Source: AWDW
      Second Query: >
        SELECT COUNT(*) FROM [dbo].[FactInternetSales]
      Expectation: SetsMatch
  testDefinitionGuid: 0aebe47c-6410-4de9-b695-c74591b7fac0
  testName: Sales.SalesOrderHeader x dbo.FactInternetSales
  testFullName: '[Integration test].[1].[Sales.SalesOrderHeader x dbo.FactInternetSales].[Sales.SalesOrderHeader x dbo.FactInternetSales]'
  testSuite: Integration test
  testCase: Sales.SalesOrderHeader x dbo.FactInternetSales
  description: Count of rows
  firstDataSource: AW
  firstQuery: >
    SELECT COUNT(*) 

    FROM [Sales].[SalesOrderHeader] H

    JOIN Sales.SalesOrderDetail D

    ON D.SalesOrderID = H.SalesOrderID

    WHERE OnlineOrderFlag = 1
  secondDataSource: AWDW
  secondQuery: >
    SELECT COUNT(*) FROM [dbo].[FactInternetSales]
  expectation: SetsMatch
- executionGuid: e65f245f-f5e5-468c-b9af-84a1ebc20531
  testResult: Passed
  message: >2+


    Description: Len of Card Number

    First Data Source: AW

    First Query:

        SELECT CardNumber FROM [Sales].[CreditCard] WHERE LEN(CardNumber) <> 14


  startTime: 2023-02-20T16:23:01.5230674+01:00
  endTime: 2023-02-20T16:23:01.5292129+01:00
  duration: 00:00:00.0061455
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: 26f63e42-1748-4835-890e-6088a95eaef5
    suite: Smoke test
    order: 2
    testCase: Sales.CreditCard
    name: Sales.CreditCard
    testFullName: '[Smoke test].[2].[Sales.CreditCard].[Sales.CreditCard]'
    descripiton: Len of Card Number
    firstDataSource: AW
    firstQuery: >
      SELECT CardNumber FROM [Sales].[CreditCard] WHERE LEN(CardNumber) <> 14
    secondDataSource: 
    secondQuery: 
    expectation: SetIsEmpty
    timeout: 0
    settings:
      TestSuite: Smoke test
      Order: 2
      TestCase: Sales.CreditCard
      Name: Sales.CreditCard
      Description: Len of Card Number
      First Data Source: AW
      First Query: >
        SELECT CardNumber FROM [Sales].[CreditCard] WHERE LEN(CardNumber) <> 14
      Expectation: SetIsEmpty
  testDefinitionGuid: 26f63e42-1748-4835-890e-6088a95eaef5
  testName: Sales.CreditCard
  testFullName: '[Smoke test].[2].[Sales.CreditCard].[Sales.CreditCard]'
  testSuite: Smoke test
  testCase: Sales.CreditCard
  description: Len of Card Number
  firstDataSource: AW
  firstQuery: >
    SELECT CardNumber FROM [Sales].[CreditCard] WHERE LEN(CardNumber) <> 14
  secondDataSource: 
  secondQuery: 
  expectation: SetIsEmpty
- executionGuid: 82d6a509-9e24-4aed-be9b-5d96a7b47742
  testResult: Passed
  message: >2+


    Description: column SafetyStockLevel must not contain 0 or NULL

    First Data Source: AW

    First Query:

        SELECT * 
    FROM [Production].[Product]

    WHERE SafetyStockLevel = 0 OR SafetyStockLevel IS NULL


  startTime: 2023-02-20T16:23:01.5302591+01:00
  endTime: 2023-02-20T16:23:01.5352938+01:00
  duration: 00:00:00.0050347
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: 201c16ec-4d2f-475b-a25b-2b7e55a2db66
    suite: Smoke test
    order: 3
    testCase: Production.Product
    name: 0 and NULL values
    testFullName: '[Smoke test].[3].[Production.Product].[0 and NULL values]'
    descripiton: column SafetyStockLevel must not contain 0 or NULL
    firstDataSource: AW
    firstQuery: >
      SELECT * 

      FROM [Production].[Product]

      WHERE SafetyStockLevel = 0 OR SafetyStockLevel IS NULL
    secondDataSource: 
    secondQuery: 
    expectation: SetIsEmpty
    timeout: 0
    settings:
      TestSuite: Smoke test
      Order: 3
      TestCase: Production.Product
      Name: 0 and NULL values
      Description: column SafetyStockLevel must not contain 0 or NULL
      First Data Source: AW
      First Query: >
        SELECT * 

        FROM [Production].[Product]

        WHERE SafetyStockLevel = 0 OR SafetyStockLevel IS NULL
      Expectation: SetIsEmpty
  testDefinitionGuid: 201c16ec-4d2f-475b-a25b-2b7e55a2db66
  testName: 0 and NULL values
  testFullName: '[Smoke test].[3].[Production.Product].[0 and NULL values]'
  testSuite: Smoke test
  testCase: Production.Product
  description: column SafetyStockLevel must not contain 0 or NULL
  firstDataSource: AW
  firstQuery: >
    SELECT * 

    FROM [Production].[Product]

    WHERE SafetyStockLevel = 0 OR SafetyStockLevel IS NULL
  secondDataSource: 
  secondQuery: 
  expectation: SetIsEmpty
- executionGuid: e7afa833-1585-4808-b0e9-8972d921e8e3
  testResult: Failed
  message: >+
    No row was expected but at least one row exists.


    ┌──────────────┬───────────┐

    │StandardCost  │ListPrice  │

    ╞══════════════╪═══════════╡

    │666.0000      │0.0000     │

    └──────────────┴───────────┘



    Description: value in column StandardCost must not be greater than value in column ListPrice

    First Data Source: AW

    First Query:

        SELECT StandardCost, ListPrice 
    FROM [Production].[Product]

    WHERE StandardCost > ListPrice


  startTime: 2023-02-20T16:23:01.5392772+01:00
  endTime: 2023-02-20T16:23:01.5436355+01:00
  duration: 00:00:00.0043583
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: 0fe09a1e-ce66-47bf-88b2-f88d55384c19
    suite: Smoke test
    order: 4
    testCase: Production.Product
    name: equal values
    testFullName: '[Smoke test].[4].[Production.Product].[equal values]'
    descripiton: value in column StandardCost must not be greater than value in column ListPrice
    firstDataSource: AW
    firstQuery: >
      SELECT StandardCost, ListPrice 

      FROM [Production].[Product]

      WHERE StandardCost > ListPrice
    secondDataSource: 
    secondQuery: 
    expectation: SetIsEmpty
    timeout: 0
    settings:
      TestSuite: Smoke test
      Order: 4
      TestCase: Production.Product
      Name: equal values
      Description: value in column StandardCost must not be greater than value in column ListPrice
      First Data Source: AW
      First Query: >
        SELECT StandardCost, ListPrice 

        FROM [Production].[Product]

        WHERE StandardCost > ListPrice
      Expectation: SetIsEmpty
  testDefinitionGuid: 0fe09a1e-ce66-47bf-88b2-f88d55384c19
  testName: equal values
  testFullName: '[Smoke test].[4].[Production.Product].[equal values]'
  testSuite: Smoke test
  testCase: Production.Product
  description: value in column StandardCost must not be greater than value in column ListPrice
  firstDataSource: AW
  firstQuery: >
    SELECT StandardCost, ListPrice 

    FROM [Production].[Product]

    WHERE StandardCost > ListPrice
  secondDataSource: 
  secondQuery: 
  expectation: SetIsEmpty
- executionGuid: b1b055eb-a12b-41a9-ba1d-4dd4d6811800
  testResult: Failed
  message: >+
    No row was expected but at least one row exists.


    ┌───────────┬─────────────────┬───────────────┬──────────┬───────────────────┬───────┬──────────────────┬──────────────┬──────────────┬───────────┬──────┬─────────────────────┬───────────────────────┬────────┬───────────────────┬─────────────┬───────┬───────┬──────────────────────┬────────────────┬───────────────────────┬─────────────┬──────────────────┬───────────────────────────┬──────────────────────┐

    │ProductID  │Name             │ProductNumber  │MakeFlag  │FinishedGoodsFlag  │Color  │SafetyStockLevel  │ReorderPoint  │StandardCost  │ListPrice  │Size  │SizeUnitMeasureCode  │WeightUnitMeasureCode  │Weight  │DaysToManufacture  │ProductLine  │Class  │Style  │ProductSubcategoryID  │ProductModelID  │SellStartDate          │SellEndDate  │DiscontinuedDate  │rowguid                    │ModifiedDate          │

    ╞═══════════╪═════════════════╪═══════════════╪══════════╪═══════════════════╪═══════╪══════════════════╪══════════════╪══════════════╪═══════════╪══════╪═════════════════════╪═══════════════════════╪════════╪═══════════════════╪═════════════╪═══════╪═══════╪══════════════════════╪════════════════╪═══════════════════════╪═════════════╪══════════════════╪═══════════════════════════╪══════════════════════╡

    │1          │Adjustable Race  │AR-5381        │False     │False              │       │1000              │750           │0.0000        │0.0000     │      │                     │                       │        │0                  │             │       │       │                      │                │4/30/2008 12:00:00 AM  │             │                  │694215b7-08f7-4c0d-acb...  │2/8/2014 10:01:36 AM  │

    └───────────┴─────────────────┴───────────────┴──────────┴───────────────────┴───────┴──────────────────┴──────────────┴──────────────┴───────────┴──────┴─────────────────────┴───────────────────────┴────────┴───────────────────┴─────────────┴───────┴───────┴──────────────────────┴────────────────┴───────────────────────┴─────────────┴──────────────────┴───────────────────────────┴──────────────────────┘



    Description: date in column SellStartDate must not be later than 1.1.2000

    First Data Source: AW

    First Query:

        SELECT * 
    FROM [Production].[Product]

    WHERE SellStartDate > 2000-01-01


  startTime: 2023-02-20T16:23:01.5446326+01:00
  endTime: 2023-02-20T16:23:01.5974118+01:00
  duration: 00:00:00.0527792
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: ebefb7c9-45ed-4843-9823-a0aa0c5d0e5a
    suite: Smoke test
    order: 5
    testCase: Production.Product
    name: date not later than 1.1.2000
    testFullName: '[Smoke test].[5].[Production.Product].[date not later than 1.1.2000]'
    descripiton: date in column SellStartDate must not be later than 1.1.2000
    firstDataSource: AW
    firstQuery: >
      SELECT * 

      FROM [Production].[Product]

      WHERE SellStartDate > 2000-01-01
    secondDataSource: 
    secondQuery: 
    expectation: SetIsEmpty
    timeout: 0
    settings:
      TestSuite: Smoke test
      Order: 5
      TestCase: Production.Product
      Name: date not later than 1.1.2000
      Description: date in column SellStartDate must not be later than 1.1.2000
      First Data Source: AW
      First Query: >
        SELECT * 

        FROM [Production].[Product]

        WHERE SellStartDate > 2000-01-01
      Expectation: SetIsEmpty
  testDefinitionGuid: ebefb7c9-45ed-4843-9823-a0aa0c5d0e5a
  testName: date not later than 1.1.2000
  testFullName: '[Smoke test].[5].[Production.Product].[date not later than 1.1.2000]'
  testSuite: Smoke test
  testCase: Production.Product
  description: date in column SellStartDate must not be later than 1.1.2000
  firstDataSource: AW
  firstQuery: >
    SELECT * 

    FROM [Production].[Product]

    WHERE SellStartDate > 2000-01-01
  secondDataSource: 
  secondQuery: 
  expectation: SetIsEmpty
- executionGuid: ded05279-7c8b-4469-8e10-9061a114a44b
  testResult: Passed
  message: >2+


    Description: value in column TransactionType must contain only values W, S, P

    First Data Source: AW

    First Query:

        SELECT * 
    FROM [Production].[TransactionHistory]

    WHERE TransactionType NOT IN ('W','S','P')


  startTime: 2023-02-20T16:23:01.6487806+01:00
  endTime: 2023-02-20T16:23:01.6810183+01:00
  duration: 00:00:00.0322377
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: fe01e9c0-14ab-459d-8f1a-112f4cdcc7fd
    suite: Smoke test
    order: 6
    testCase: Production.Product
    name: values W, S, P in TransactionType
    testFullName: '[Smoke test].[6].[Production.Product].[values W, S, P in TransactionType]'
    descripiton: value in column TransactionType must contain only values W, S, P
    firstDataSource: AW
    firstQuery: >
      SELECT * 

      FROM [Production].[TransactionHistory]

      WHERE TransactionType NOT IN ('W','S','P')
    secondDataSource: 
    secondQuery: 
    expectation: SetIsEmpty
    timeout: 0
    settings:
      TestSuite: Smoke test
      Order: 6
      TestCase: Production.Product
      Name: values W, S, P in TransactionType
      Description: value in column TransactionType must contain only values W, S, P
      First Data Source: AW
      First Query: >
        SELECT * 

        FROM [Production].[TransactionHistory]

        WHERE TransactionType NOT IN ('W','S','P')
      Expectation: SetIsEmpty
  testDefinitionGuid: fe01e9c0-14ab-459d-8f1a-112f4cdcc7fd
  testName: values W, S, P in TransactionType
  testFullName: '[Smoke test].[6].[Production.Product].[values W, S, P in TransactionType]'
  testSuite: Smoke test
  testCase: Production.Product
  description: value in column TransactionType must contain only values W, S, P
  firstDataSource: AW
  firstQuery: >
    SELECT * 

    FROM [Production].[TransactionHistory]

    WHERE TransactionType NOT IN ('W','S','P')
  secondDataSource: 
  secondQuery: 
  expectation: SetIsEmpty
- executionGuid: 068a778f-6c09-4888-a558-3204e0c90160
  testResult: Failed
  message: >+
    Different value on row # 45 in column 1 (Name): in the first set '! Front Brake', in the second set '! Front Brakes'.


    The first set and the second set are different:


    FIRST SET:

    ┌────┬───────────────┐

    │#   │Name           │

    ╞════╪═══════════════╡

    │45  │! Front Brake  │

    └────┴───────────────┘



    SECOND SET:

    ┌────┬────────────────┐

    │#   │Name            │

    ╞════╪════════════════╡

    │45  │! Front Brakes  │

    └────┴────────────────┘




    Description: value Name in Product table must be equal as in DimProduct table

    First Data Source: AW

    First Query:

        SELECT DISTINCT Name
    FROM [Production].[Product] 

    ORDER BY Name



    Second Data Source: AWDW

    Second Query:

        SELECT DISTINCT EnglishProductName Name
    FROM [dbo].[DimProduct]

    ORDER BY EnglishProductName


  startTime: 2023-02-20T16:23:01.6821568+01:00
  endTime: 2023-02-20T16:23:01.7261156+01:00
  duration: 00:00:00.0439588
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: 061a36af-3598-42a5-9b44-2a22cea8e7c9
    suite: Integration test
    order: 7
    testCase: Production.Product x dbo.DimProduct
    name: equal value Name
    testFullName: '[Integration test].[7].[Production.Product x dbo.DimProduct].[equal value Name]'
    descripiton: value Name in Product table must be equal as in DimProduct table
    firstDataSource: AW
    firstQuery: >
      SELECT DISTINCT Name

      FROM [Production].[Product] 

      ORDER BY Name
    secondDataSource: AWDW
    secondQuery: >
      SELECT DISTINCT EnglishProductName Name

      FROM [dbo].[DimProduct]

      ORDER BY EnglishProductName
    expectation: SetsMatch
    timeout: 0
    settings:
      TestSuite: Integration test
      Order: 7
      TestCase: Production.Product x dbo.DimProduct
      Name: equal value Name
      Description: value Name in Product table must be equal as in DimProduct table
      First Data Source: AW
      First Query: >
        SELECT DISTINCT Name

        FROM [Production].[Product] 

        ORDER BY Name
      Second Data Source: AWDW
      Second Query: >
        SELECT DISTINCT EnglishProductName Name

        FROM [dbo].[DimProduct]

        ORDER BY EnglishProductName
      Expectation: SetsMatch
  testDefinitionGuid: 061a36af-3598-42a5-9b44-2a22cea8e7c9
  testName: equal value Name
  testFullName: '[Integration test].[7].[Production.Product x dbo.DimProduct].[equal value Name]'
  testSuite: Integration test
  testCase: Production.Product x dbo.DimProduct
  description: value Name in Product table must be equal as in DimProduct table
  firstDataSource: AW
  firstQuery: >
    SELECT DISTINCT Name

    FROM [Production].[Product] 

    ORDER BY Name
  secondDataSource: AWDW
  secondQuery: >
    SELECT DISTINCT EnglishProductName Name

    FROM [dbo].[DimProduct]

    ORDER BY EnglishProductName
  expectation: SetsMatch
- executionGuid: 70ec691a-26eb-4c2c-9e76-4a41a631c1da
  testResult: Passed
  message: >+
    Both sets have the same number of rows and their values match.


    Description: each product from table DimProduct must have record in table FactProductInventory

    First Data Source: AWDW

    First Query:

        SELECT COUNT(ProductKey) 
    FROM [dbo].[DimProduct]



    Second Data Source: AWDW

    Second Query:

        SELECT COUNT(DISTINCT ProductKey) 
    FROM [dbo].[FactProductInventory]


  startTime: 2023-02-20T16:23:01.7307976+01:00
  endTime: 2023-02-20T16:23:02.4519534+01:00
  duration: 00:00:00.7211558
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: 0d214fe4-558d-4cd2-988c-5149a1b69c8c
    suite: Integration test
    order: 8
    testCase: dbo.DimProduct x dbo.FactProductInventory
    name: each product has record
    testFullName: '[Integration test].[8].[dbo.DimProduct x dbo.FactProductInventory].[each product has record]'
    descripiton: each product from table DimProduct must have record in table FactProductInventory
    firstDataSource: AWDW
    firstQuery: >
      SELECT COUNT(ProductKey) 

      FROM [dbo].[DimProduct]
    secondDataSource: AWDW
    secondQuery: >
      SELECT COUNT(DISTINCT ProductKey) 

      FROM [dbo].[FactProductInventory]
    expectation: SetsMatch
    timeout: 0
    settings:
      TestSuite: Integration test
      Order: 8
      TestCase: dbo.DimProduct x dbo.FactProductInventory
      Name: each product has record
      Description: each product from table DimProduct must have record in table FactProductInventory
      First Data Source: AWDW
      First Query: >
        SELECT COUNT(ProductKey) 

        FROM [dbo].[DimProduct]
      Second Data Source: AWDW
      Second Query: >
        SELECT COUNT(DISTINCT ProductKey) 

        FROM [dbo].[FactProductInventory]
      Expectation: SetsMatch
  testDefinitionGuid: 0d214fe4-558d-4cd2-988c-5149a1b69c8c
  testName: each product has record
  testFullName: '[Integration test].[8].[dbo.DimProduct x dbo.FactProductInventory].[each product has record]'
  testSuite: Integration test
  testCase: dbo.DimProduct x dbo.FactProductInventory
  description: each product from table DimProduct must have record in table FactProductInventory
  firstDataSource: AWDW
  firstQuery: >
    SELECT COUNT(ProductKey) 

    FROM [dbo].[DimProduct]
  secondDataSource: AWDW
  secondQuery: >
    SELECT COUNT(DISTINCT ProductKey) 

    FROM [dbo].[FactProductInventory]
  expectation: SetsMatch
- executionGuid: d72d4ee6-8f12-4e5e-a2c3-a9a5fa588a26
  testResult: Failed
  message: >+
    Different value on row # 1 in column 1 (ProductID): in the first set '! 707', in the second set '! 214'.


    The first set and the second set are different:


    FIRST SET:

    ┌───┬───────────┬───────────────┐

    │#  │ProductID  │               │

    ╞═══╪═══════════╪═══════════════╡

    │1  │! 707      │157772.394392  │

    └───┴───────────┴───────────────┘



    SECOND SET:

    ┌───┬────────────┬────────────┐

    │#  │ProductKey  │            │

    ╞═══╪════════════╪════════════╡

    │1  │! 214       │29182.4490  │

    └───┴────────────┴────────────┘




    Description: Total sum of each product in table SalesOrderHeader equal to total sum in table FactInternetSales

    First Data Source: AW

    First Query:

        SELECT D.ProductID, SUM(LineTotal)  
    FROM [Sales].[SalesOrderHeader] H

    JOIN Sales.SalesOrderDetail D

    ON D.SalesOrderID = H.SalesOrderID

    GROUP BY D.ProductID

    ORDER BY D.ProductID



    Second Data Source: AWDW

    Second Query:

        SELECT ProductKey, SUM(TotalProductCost) 
    FROM [dbo].[FactInternetSales] 

    GROUP BY ProductKey

    ORDER BY ProductKey


  startTime: 2023-02-20T16:23:02.4532935+01:00
  endTime: 2023-02-20T16:23:02.6128381+01:00
  duration: 00:00:00.1595446
  exceptionMessage: 
  testDefinition:
    testDefinitionGuid: 05082272-7b0b-49d7-b2c0-c5ae3798ea6c
    suite: Integration test
    order: 9
    testCase: Sales.SalesOrderHeader x dbo.FactInternetSales
    name: equal total sum
    testFullName: '[Integration test].[9].[Sales.SalesOrderHeader x dbo.FactInternetSales].[equal total sum]'
    descripiton: Total sum of each product in table SalesOrderHeader equal to total sum in table FactInternetSales
    firstDataSource: AW
    firstQuery: >
      SELECT D.ProductID, SUM(LineTotal)  

      FROM [Sales].[SalesOrderHeader] H

      JOIN Sales.SalesOrderDetail D

      ON D.SalesOrderID = H.SalesOrderID

      GROUP BY D.ProductID

      ORDER BY D.ProductID
    secondDataSource: AWDW
    secondQuery: >
      SELECT ProductKey, SUM(TotalProductCost) 

      FROM [dbo].[FactInternetSales] 

      GROUP BY ProductKey

      ORDER BY ProductKey
    expectation: SetsMatch
    timeout: 0
    settings:
      TestSuite: Integration test
      Order: 9
      TestCase: Sales.SalesOrderHeader x dbo.FactInternetSales
      Name: equal total sum
      Description: Total sum of each product in table SalesOrderHeader equal to total sum in table FactInternetSales
      First Data Source: AW
      First Query: >
        SELECT D.ProductID, SUM(LineTotal)  

        FROM [Sales].[SalesOrderHeader] H

        JOIN Sales.SalesOrderDetail D

        ON D.SalesOrderID = H.SalesOrderID

        GROUP BY D.ProductID

        ORDER BY D.ProductID
      Second Data Source: AWDW
      Second Query: >
        SELECT ProductKey, SUM(TotalProductCost) 

        FROM [dbo].[FactInternetSales] 

        GROUP BY ProductKey

        ORDER BY ProductKey
      Expectation: SetsMatch
  testDefinitionGuid: 05082272-7b0b-49d7-b2c0-c5ae3798ea6c
  testName: equal total sum
  testFullName: '[Integration test].[9].[Sales.SalesOrderHeader x dbo.FactInternetSales].[equal total sum]'
  testSuite: Integration test
  testCase: Sales.SalesOrderHeader x dbo.FactInternetSales
  description: Total sum of each product in table SalesOrderHeader equal to total sum in table FactInternetSales
  firstDataSource: AW
  firstQuery: >
    SELECT D.ProductID, SUM(LineTotal)  

    FROM [Sales].[SalesOrderHeader] H

    JOIN Sales.SalesOrderDetail D

    ON D.SalesOrderID = H.SalesOrderID

    GROUP BY D.ProductID

    ORDER BY D.ProductID
  secondDataSource: AWDW
  secondQuery: >
    SELECT ProductKey, SUM(TotalProductCost) 

    FROM [dbo].[FactInternetSales] 

    GROUP BY ProductKey

    ORDER BY ProductKey
  expectation: SetsMatch
passedCount: 5
failedCount: 4
errorCount: 0
notYetExecutedCount: 0
inconclusiveCount: 0
skippedCount: 0
unknownCount: 0
totalCount: 9
